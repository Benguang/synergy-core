trigger:
- master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'

  strategy:
    matrix:
      ubuntu16.04:
        image: symless/synergy-core:ubuntu16.04
        packager: deb
      ubuntu18.04:
        image: symless/synergy-core:ubuntu18.04
        packager: deb
      ubuntu19.10:
        image: symless/synergy-core:ubuntu19.10
        packager: deb
      ubuntu20.04:
        image: symless/synergy-core:ubuntu20.04
        packager: deb
      debian9:
        image: symless/synergy-core:debian9
        packager: deb
      debian10:
        image: symless/synergy-core:debian10
        packager: deb
      fedora28:
        image: symless/synergy-core:fedora28
        packager: rpm
      fedora29:
        image: symless/synergy-core:fedora29
        packager: rpm
      fedora30:
        image: symless/synergy-core:fedora30
        packager: rpm
      centos7.6:
        image: symless/synergy-core:centos7.6
        packager: rpm
      centos8:
        image: symless/synergy-core:centos8
        packager: rpm

  container: $[ variables['image'] ]

  steps:

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'Free Trial (796b9556-9614-41a6-8040-0eb14d81fe6f'
        KeyVaultName: 'Symless'
        SecretsFilter: '*'
      displayName: "Get keys"
      condition: eq(variables['Build.Reason'], 'Manual')

    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'SymlessCodeSig.key'
      displayName: "Download GPG Key"
      name: SymlessCodeSig
      condition: eq(variables['Build.Reason'], 'Manual')

    - script: |
        echo $(gpgPassword) | gpg --import --no-tty --batch --yes $(SymlessCodeSig.secureFilePath) && echo "Key Imported"
      displayName: 'Install GPG key'
      condition: eq(variables['Build.Reason'], 'Manual')

    - script: |
        mkdir build-release
        cd build-release
        if [ -z $(which cmake) ]; then cmake3 -DCMAKE_BUILD_TYPE=Release ..; else cmake -DCMAKE_BUILD_TYPE=Release ..; fi
        make -j
      displayName: 'Build Release'

    - script: |
        mkdir build-debug
        cd build-debug
        if [ -z $(which cmake) ]; then cmake3 -DCMAKE_BUILD_TYPE=Release ..; else cmake -DCMAKE_BUILD_TYPE=Release ..; fi
        make -j
      displayName: 'Build Debug'

    - script: |
        mkdir build-ent
        cd build-ent
        export SYNERGY_ENTERPRISE=1
        if [ -z $(which cmake) ]; then cmake3 -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON ..; else cmake -DCMAKE_BUILD_TYPE=Release -DSYNERGY_ENTERPRISE=ON ..; fi
        make -j
      displayName: 'Build enterprise'

    - script: |
        . ./build/version
        SYNERGY_VERSION="$SYNERGY_VERSION_MAJOR.$SYNERGY_VERSION_MINOR.$SYNERGY_VERSION_PATCH"
        SYNERGY_DEB_VERSION="${SYNERGY_VERSION}.${SYNERGY_VERSION_STAGE}~b$(Build.BuildNumber)+$(Build.SourceVersion)"
        dch --create --package "synergy" --controlmaint --distribution unstable --newversion $SYNERGY_DEB_VERSION "Initial release"
        export DEB_BUILD_OPTIONS="parallel=8"
        debuild --preserve-envvar SYNERGY_*
        filename=$(ls *.deb)
        filename_new=${filename%%${SYNERGY_DEB_VERSION}*}${SYNERGY_DEB_VERSION}_ubuntu19${filename##*${SYNERGY_DEB_VERSION}}
        mv $filename $filename_new
        ls -la
      displayName: "Package Binary (Standard)"
      condition: eq(variables['packager'],'deb')
      #condition: and(eq(variables['packager'],'deb', eq(variables['Build.Reason'], 'Manual'))

    - script: |
        . ./build/version
        SYNERGY_VERSION="$SYNERGY_VERSION_MAJOR.$SYNERGY_VERSION_MINOR.$SYNERGY_VERSION_PATCH"
        SYNERGY_DEB_VERSION="${SYNERGY_VERSION}.${SYNERGY_VERSION_STAGE}~b$(Build.BuildNumber)+$(Build.SourceVersion)"
        dch --create --package "synergy" --controlmaint --distribution unstable --newversion $SYNERGY_DEB_VERSION "Initial release"
        export DEB_BUILD_OPTIONS="parallel=8"
        debuild --preserve-envvar SYNERGY_*
        filename=$(ls *.deb)
        filename_new=${filename%%${SYNERGY_DEB_VERSION}*}${SYNERGY_DEB_VERSION}_ubuntu19${filename##*${SYNERGY_DEB_VERSION}}
        filename_new=${filename_new%%synergy*}synergy-enterprise${filename_new##*synergy}
        mv $filename $filename_new
        ls -la
      displayName: "Package Binary (Enterprise)"
      condition: eq(variables['packager'],'deb')
      #condition: and(eq(variables['packager'],'deb', eq(variables['Build.Reason'], 'Manual'))


# - job: MacOS
#   strategy:
#     matrix:
#       mojave:
#         image: macOS-10.14

#   pool: 
#     vmImage: $[ variables['image'] ]

#   variables:
#     QT_PATH: '/usr/local/opt/qt/bin'

#   steps:
#   - task: CmdLine@2
#     inputs:
#       script: 'brew install qt'
#     displayName: 'Installing QT'

#   - task: CmdLine@2
#     inputs:
#       script: |
#         export PATH="$(QT_PATH):$PATH"
#         mkdir build
#         cd build 
#         cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.12 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CONFIGURATION_TYPES=Release ..
#     displayName: 'Cmake'

#   - task: CmdLine@2
#     inputs:
#       script: |
#         cd build
#         make -j
#     displayName: 'Compiling'

# - job: Windows
#   strategy:
#     matrix:
#       vs2019:
#         image: windows-2019

#   pool: 
#     vmImage: $[ variables['image'] ]

#   variables:
#     QT_VERSION: '5.12.6'
#     QLI_VERSION: '2019.05.26.1'
#     QLI_OUT_DIR: '.\deps\Qt'
#     QLI_BASE_URL: 'http://mirrors.ocf.berkeley.edu/qt/online/qtsdkrepository/'
#     QT_PATH: '$(Build.Repository.LocalPath)\$(QLI_OUT_DIR)\$(QT_VERSION)\msvc2017_64'
#     QT_PATH_32: '$(Build.Repository.LocalPath)\$(QLI_OUT_DIR)\$(QT_VERSION)\msvc2017'
#     BONJOUR_SDK_DIR: 'deps\BonjourSDK'
#     ENV_BAT: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\vsdevcmd'

#   steps:
# #As the official installer is rather 'slow' use an unofficial installer QLI
#   - task: PowerShell@2
#     inputs:
#       targetType: 'inline'
#       script: |
#         New-Item -Force -ItemType Directory -Path ".\deps\"
#         $client = new-object System.Net.WebClient
#         $client.DownloadFile("https://github.com/nelsonjchen/qli-installer/archive/v$(QLI_VERSION).zip","deps\qli.zip")
#     displayName: 'Downloading QLI v$(QLI_VERSION)'

#   - task: PowerShell@2
#     inputs:
#       targetType: 'inline'
#       script: |
#         New-Item -Force -ItemType Directory -Path ".\deps\"
#         $client = new-object System.Net.WebClient
#         $client.DownloadFile("https://binaries.symless.com/bonjour/BonjourSDK.zip",".\deps\bonjoursdk.zip")
#         $client.DownloadFile("https://binaries.symless.com/bonjour/Bonjour64.msi",".\deps\Bonjour64.msi")
#     displayName: 'Downloading Bonjour SKD'

#   - task: ExtractFiles@1
#     inputs:
#       archiveFilePatterns: './deps/*.zip'
#       destinationFolder: './deps/'
#       cleanDestinationFolder: false
#     displayName: 'Extracting zips'

#   - task: PowerShell@2
#     inputs:
#       targetType: 'inline'
#       script: 'pip install -r .\deps\qli-installer-$(QLI_VERSION)\requirements.txt'
#     displayName: 'Install QLI requirements'

#   - task: PowerShell@2
#     inputs:
#       targetType: 'inline'
#       script: |
#         Get-ChildItem '.\deps'
#         msiexec.exe /i ${pwd}\deps\Bonjour64.msi INSTALLDIR="${pwd}\deps\Bonjour" /qb
#     displayName: 'Installing bonjour SDK'

#   - task: PythonScript@0
#     inputs:
#       scriptSource: 'filePath'
#       scriptPath: '.\deps\qli-installer-$(QLI_VERSION)\qli-installer.py'
#       arguments: '$(QT_VERSION) windows desktop win64_msvc2017_64'
#     displayName: 'Installing QT $(QT_VERSION) x64'

#   - script: |
#       call "$(ENV_BAT)" -arch=x64
#       set BONJOUR_SDK_HOME=%cd%\$(BONJOUR_SDK_DIR)
#       mkdir build64
#       cd build64
#       cmake -G "Visual Studio 16 2019" -A x64 -V -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(QT_PATH) ..
#     displayName: 'Cmake x64'

#   - task: MSBuild@1
#     inputs:
#       solution: 'build64/synergy-core.sln'
#       msbuildVersion: '16.0'
#       msbuildArchitecture: 'x64'
#       platform: 'x64'
#       configuration: 'Release'
#       msbuildArguments: '/m'
#       maximumCpuCount: true
#     displayName: 'Compiling x64'

#   - task: PythonScript@0
#     inputs:
#       scriptSource: 'filePath'
#       scriptPath: '.\deps\qli-installer-$(QLI_VERSION)\qli-installer.py'
#       arguments: '$(QT_VERSION) windows desktop win32_msvc2017'
#     displayName: 'Installing QT $(QT_VERSION) x32'

#   - script: |
#       call "$(ENV_BAT)" -arch=x86
#       set BONJOUR_SDK_HOME=%cd%\$(BONJOUR_SDK_DIR)
#       mkdir build32
#       cd build32
#       cmake -G "Visual Studio 16 2019" -A Win32 -V -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(QT_PATH_32) ..
#     displayName: 'Cmake x86'
#   - task: MSBuild@1
#     inputs:
#       solution: 'build32/synergy-core.sln'
#       msbuildVersion: '16.0'
#       msbuildArchitecture: 'x86'
#       platform: 'Win32'
#       configuration: 'Release'
#       msbuildArguments: '/m'
#       maximumCpuCount: true
#     displayName: 'Compiling x86'

# - job: DoxygenDoc

#   condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

#   pool:
#     vmImage: 'ubuntu-16.04'

#   steps:
#     - script: |
#         sudo DEBIAN_FRONTEND=noninteractive
#         sudo apt-get -y update
#         sudo apt-get -y install doxygen graphviz
#       displayName: 'Install Pakages'

#     - script: |
#         doxygen Doxyfile
#         cd doxygen
#         tar -czvf ../docs.tar.gz ./*
#       displayName: 'Generate Docs'

#     - task: CopyFilesOverSSH@0
#       inputs:
#         sshEndpoint: 'Azure on Sandor'
#         sourceFolder: '.'
#         contents: 'docs.tar.gz'
#         targetFolder: 'synergy-core'
#         readyTimeout: '20000'
#       displayName: 'Publish files to sandor'

#     - task: SSH@0
#       inputs:
#         sshEndpoint: 'Azure on Sandor'
#         runOptions: 'commands'
#         commands: |
#           tar -C ./synergy-core/docs -xzvf ./synergy-core/docs.tar.gz --overwrite
#         readyTimeout: '20000'
#       displayName: 'Extract files on sandor'
